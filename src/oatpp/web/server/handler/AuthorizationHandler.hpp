/***************************************************************************
 *
 * Project         _____    __   ____   _      _
 *                (  _  )  /__\ (_  _)_| |_  _| |_
 *                 )(_)(  /(__)\  )( (_   _)(_   _)
 *                (_____)(__)(__)(__)  |_|    |_|
 *
 *
 * Copyright 2018-present, Leonid Stryzhevskyi <lganzzzo@gmail.com>
 *                         Benedikt-Alexander Mokro√ü <bam@icognize.de>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ***************************************************************************/

#ifndef oatpp_web_server_handler_AuthorizationHandler_hpp
#define oatpp_web_server_handler_AuthorizationHandler_hpp

#include <oatpp/web/protocol/http/incoming/Request.hpp>
#include "oatpp/web/protocol/http/Http.hpp"
#include "oatpp/core/macro/codegen.hpp"
#include "oatpp/core/data/mapping/type/Type.hpp"


namespace oatpp { namespace web { namespace server { namespace handler {

/**
 * The AuthorizationObject superclass, all AuthorizationObjects have to implement this interface
 */
class AuthorizationObject : public oatpp::base::Countable {
public:
  oatpp::String user;
  oatpp::String password;
protected:
  AuthorizationObject() = default;

};

/**
 * The default AuthorizationObject as generated by DefaultAuthorizationHandler
 */
class DefaultAuthorizationObject : public AuthorizationObject {
public:
  DefaultAuthorizationObject() = default;
};

/**
 * Authorization Handler.
 */
class AuthorizationHandler {
public:

  /**
   * Implement this method! Return nullptr if authorization should be denied.
   * @param header - &id:oatpp::String;.
   * @return - `std::shared_ptr` to &id:oatpp::web::server::handler::AuthorizationObject;.
   */
  virtual std::shared_ptr<handler::AuthorizationObject> handleAuthorization(const oatpp::String &header) = 0;

};

/**
 * Default Authorization Handler.
 */
class DefaultAuthorizationHandler : public oatpp::base::Countable, public AuthorizationHandler {
public:
  /**
   * Constructor.
   */
  DefaultAuthorizationHandler() = default;
public:

  /**
   * Create shared DefaultAuthorizationHandler.
   * @return - `std::shared_ptr` to DefaultAuthorizationHandler.
   */
  static std::shared_ptr<DefaultAuthorizationHandler> createShared() {
    return std::make_shared<DefaultAuthorizationHandler>();
  }

  /**
   * Implementation of &l:AuthorizationHandler::handleAuthorization ();
   * @param header - &id:oatpp::String;.
   * @return - std::shared_ptr to &id:oatpp::web::server::handler::AuthorizationObject;.
   */
  std::shared_ptr<handler::AuthorizationObject> handleAuthorization(const oatpp::String &header) override;

  /**
   * Static implementation of &l:AuthorizationHandler::handleAuthorization () for convenience usage.
   * @param header - &id:oatpp::String;.
   * @return - std::shared_ptr to &id:oatpp::web::server::handler::AuthorizationObject;.
   */
  static std::shared_ptr<handler::AuthorizationObject> defaultAuthorizationObject(const oatpp::String &header);

};

}}}}

#endif /* oatpp_web_server_handler_ErrorHandler_hpp */
